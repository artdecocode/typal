<types namespace="_typal">
  <interface name="Type" desc="A representation of a type.">
    <prop string name="name">
      The name of the type.
    </prop>
    <prop type="?string" name="type">
      The type of the type.
    </prop>
    <prop type="?string" name="closureType">
      An overriding type for closure to generate externs, e.g., `function(string): boolean` instead of `(s:string) => boolean`.
    </prop>
    <prop type="?string" name="description">
      The description of the type.
    </prop>
    <prop boolean name="noToc" initial="false">
      Whether the type should not be included in the table of contents (for _Documentary_).
    </prop>
    <prop boolean name="spread" initial="false">
      When generating JSDoc, print all properties of the type, but loose individual property description.
    </prop>
    <prop boolean name="noExpand" initial="false">
      Don't print each property description.
    </prop>
    <prop boolean name="import" initial="false">
      Whether the type as an import.
    </prop>
    <prop type="?string" name="link">
      If the type is an import, the link to the documentation page.
    </prop>
    <prop type="!Array<!_typal.Property>" name="properties">
      The properties of the type.
    </prop>
    <prop type="?string" name="namespace">
      The type's namespace, e.g., `_typal`.
    </prop>
    <prop type="boolean" name="isConstructor" initial="false">
      Whether the externs should have the form of
      ```js
      /＊＊ ＠constructor ＊/
      _ns.Type
      /＊＊ ＠boolean ＊/
      _ns.Type.prototype.isConstructor
      ```
    </prop>
    <prop type="boolean" name="isInterface" initial="false">
      Same as `constructor`, but with `＠interface` annotation.
      ```js
      /＊＊ ＠interface ＊/
      _ns.Type
      /＊＊ ＠boolean ＊/
      _ns.Type.prototype.isInterface
      ```
    </prop>
    <prop type="boolean" name="isRecord" initial="false">
      Same as `constructor`, but with `＠record` annotation.
      ```js
      /＊＊ ＠record ＊/
      _ns.Type
      /＊＊ ＠boolean ＊/
      _ns.Type.prototype.isRecord
      ```
    </prop>
    <prop type="?string" name="extends">
      Types `＠constructor`, `＠interface` and `＠record` can inherit properties from other types using `@extends`. [Closure Wiki](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#extends-type).
    </prop>
    <prop type="Array<!_typal.Arg>" name="_args">
      Constructors and interfaces can have arguments defined in _types.xml_, which will be parsed and stored in this property.
    </prop>
  </interface>
</types>