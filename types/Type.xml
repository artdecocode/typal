<types namespace="_typal">
  <interface name="Type" desc="A representation of a type.">
    <prop string name="name">
      The name of the type.
    </prop>
    <prop type="?string" name="type" initial="null">
      The type of the type.
    </prop>
    <prop type="?string" name="closureType" initial="null">
      An overriding type for closure to generate externs, e.g., `function(string): boolean` instead of `(s:string) => boolean`.
    </prop>
    <prop type="?string" name="description" initial="null">
      The description of the type.
    </prop>
    <prop boolean name="noToc" initial="false">
      Whether the type should not be included in the table of contents (for _Documentary_).
    </prop>
    <prop boolean name="spread" initial="false">
      When generating JSDoc, print all properties of the type, but loose individual property description.
    </prop>
    <prop boolean name="noExpand" initial="false">
      Don't print each property description.
    </prop>
    <prop boolean name="import" initial="false">
      Whether the type as an import.
    </prop>
    <prop type="?string" name="link" initial="null">
      The link to the documentation page.
    </prop>
    <prop type="!Array<!_typal.Property>" name="properties" initial="[]">
      The properties of the type.
    </prop>
    <prop type="?string" name="namespace" initial="null">
      The type's namespace, e.g., `_typal`.
    </prop>
    <prop string name="ns">
      The namespace or an empty string.
    </prop>
    <prop string name="fullName">
      The type name with the namespace if it has with one.
    </prop>
    <prop type="boolean" name="isConstructor" initial="false">
      Whether the externs should have the form of
      ```js
      /＊＊ ＠constructor ＊/
      _ns.Type
      /＊＊ ＠boolean ＊/
      _ns.Type.prototype.isConstructor
      ```
    </prop>
    <prop type="boolean" name="isInterface" initial="false">
      Same as `constructor`, but with `＠interface` annotation.
      ```js
      /＊＊ ＠interface ＊/
      _ns.Type
      /＊＊ ＠boolean ＊/
      _ns.Type.prototype.isInterface
      ```
    </prop>
    <prop type="boolean" name="isRecord" initial="false">
      Same as `constructor`, but with `＠record` annotation.
      ```js
      /＊＊ ＠record ＊/
      _ns.Type
      /＊＊ ＠boolean ＊/
      _ns.Type.prototype.isRecord
      ```
    </prop>
    <prop type="?string" name="extends" initial="null">
      Types `＠constructor`, `＠interface` and `＠record` can inherit properties from other types using `＠extends`. [Closure Wiki](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#extends-type).
    </prop>
    <prop type="Array<!_typal.Arg>" name="args" initial="null">
      Constructors and interfaces can have arguments defined in _types.xml_, which will be parsed and stored in this property.
    </prop>
    <fn name="toMarkdown" return="{ LINE: string, table: string | {
          props: !Array<{
            prop: !_typal.Property,
            typeName: string | !_typedefsParser.Type,
            name: string,
            de: string,
            d: string
          }>,
          anyHaveDefault: boolean,
          constr: boolean
      }, displayInDetails: boolean }">
      <arg name="allTypes" type="!Array<!_typal.Type>">
        The array with all types for linking.
      </arg>
      <arg name="opts" type="!_typal.ToMarkdownOptions">
        Options passed by _Documentary_. If `narrow` is specified, the table returned as an object for manual printing, otherwise a string is returned. WIP.
      </arg>
      Converts a type to a markdown string. This function is closely integrated with the _Documentary_ package, however can also be used to get a standard markdown string with properties in a table.
    </fn>
    <prop type="!Array<string>" name="examples" initial="[]">
      Examples that have been read.
    </prop>
  </interface>
</types>