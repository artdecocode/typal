{
"version":3,
"file":"compile/depack.js",
"lineCount":668,
"mappings":"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",
"sources":[" [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:util/polyfill] "," [synthetic:es6/string/trimend] ","node_modules/mismatch/src/index.js","node_modules/rexml/src/lib/res-simple.js","node_modules/rexml/src/index.js","node_modules/rexml/src/lib/index.js","node_modules/@typedefs/parser/src/lib.js","node_modules/@typedefs/parser/src/tokens.js","node_modules/@typedefs/parser/src/index.js","src/lib/index.js","src/lib/Arg.js","src/lib/Property.js","src/lib/get-links.js","src/lib/make-props-table.js","src/lib/Type.js","src/lib/Method.js","src/lib/Import.js","node_modules/os/index.js","node_modules/@artdeco/clean-stack/src/index.js","src/lib/parse.js","src/depack.js"],
"sourcesContent":["/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n * @suppress {reportUnknownTypes}\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.defineProperty() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n *\n * Refuses to define properties on Array.prototype and Object.prototype,\n * since we can't make them non-enumerable and this messes up peoples' for\n * loops.  Beyond this, we simply assign values and not worry\n * about enumerability or writeability.\n * @param {?} target\n * @param {string} property\n * @param {?} descriptor\n * @suppress {reportUnknownTypes}\n */\n$jscomp.defineProperty =\n    $jscomp.ASSUME_ES5 || typeof Object.defineProperties == 'function' ?\n    Object.defineProperty :\n    function(target, property, descriptor) {\n      descriptor = /** @type {!ObjectPropertyDescriptor} */ (descriptor);\n      // NOTE: This is currently never called with a descriptor outside\n      // the control of the compiler.  If we ever decide to polyfill either\n      // Object.defineProperty or Reflect.defineProperty for ES3, we should\n      // explicitly check for `get` or `set` on the descriptor and throw a\n      // TypeError, since it's impossible to properly polyfill it.\n      if (target == Array.prototype || target == Object.prototype) return;\n      target[property] = descriptor.value;\n    };\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Runtime code to store the global object.\n */\n'require base';\n\n\n/**\n * @param {!Object} maybeGlobal\n * @return {!Object} The global object.\n * @suppress {undefinedVars|reportUnknownTypes}\n */\n$jscomp.getGlobal = function(maybeGlobal) {\n  // This logic can be simplified to be made more optimizable.\n  return (typeof window != 'undefined' && window === maybeGlobal) ?\n      maybeGlobal :\n      (typeof global != 'undefined' && global != null) ?\n      /** @type {!Object} */ (global) :\n      maybeGlobal;\n};\n\n\n// TODO(sdh): This should be typed as \"the global object\" now that the type\n// of \"Global\" has landed in the type system.\n/**\n * The global object. For browsers we could just use `this` but in Node that\n * doesn't work.\n * @const {?}\n */\n$jscomp.global = $jscomp.getGlobal(this);\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n */\n'require util/defineproperty';\n'require util/global';\n\n\n/**\n * @param {string} target Qualified name of the class or method to polyfill,\n *     e.g. 'Array.prototype.includes' or 'Map'.\n * @param {?function(*): *} polyfill A function that takes the current browser\n *     implementation of the target and returns an optional new polyfill\n *     implementation.  If null is returned, then no polyfill will be added.  A\n *     null argument for this parameter indicates that the function will not be\n *     polyfilled, and is only useful for `build_polyfill_table.js` bookkeeping.\n * @param {string} fromLang The language level in which the target is expected\n *     to already be present in the browser.  The compiler requires that\n *     `languageOut < fromLang` before injecting a polyfill (i.e. if the\n *     specified output language already includes the feature then there's no\n *     need to polyfill it).\n * @param {string} toLang The language level required by the polyfill\n *     implementation.  The compiler will issue an error if a polyfill is\n *     required, but `languageOut < toLang`.  Additionally, the\n *     `build_polyfill_table.js` script audits the polyfill dependency tree to\n *     ensure that no polyfill with a lower `toLang` depends on one with a\n *     higher `toLang`.\n * @suppress {reportUnknownTypes}\n * @noinline\n * NOTE: We prevent inlining so RemoveUnusedPolyfills can always recognize this\n * call.\n */\n$jscomp.polyfill = function(target, polyfill, fromLang, toLang) {\n  if (!polyfill) return;\n  var obj = $jscomp.global;\n  var split = target.split('.');\n  for (var i = 0; i < split.length - 1; i++) {\n    var key = split[i];\n    if (!(key in obj)) obj[key] = {};  // Might want to be defineProperty.\n    obj = obj[key];\n  }\n  var property = split[split.length - 1];\n  var orig = obj[property];\n  var impl = polyfill(orig);\n  if (impl == orig || impl == null) return;\n  $jscomp.defineProperty(\n      obj, property, {configurable: true, writable: true, value: impl});\n};\n","/*\n * Copyright 2019 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require util/polyfill';\n\n// Most browsers implemented trimRight around ES5-time-frame, but it wasn't\n// officially part of the language specification until ES_2019, so we have\n// to provide a polyfill for it.\n// IE11 doesn't have it, of course...\n$jscomp.polyfill('String.prototype.trimRight', function(orig) {\n  /**\n   * @this {string}\n   * @return {string}\n   */\n  function polyfill() {\n    return this.replace(/[\\s\\xa0]+$/, '');\n  }\n  return orig || polyfill;\n}, 'es_2019', 'es3');\n\n$jscomp.polyfill('String.prototype.trimEnd', function(orig) {\n  return orig || String.prototype.trimRight;\n}, 'es_2019', 'es3');\n","/**\n * Returns an array of captured groups of a regular expression as objects. Does not modify the `lastIndex` property of the regex.\n * @param {RegExp} re The regular expression used for matching.\n * @param {string} string String to find matches in.\n * @param {Array<string>} keys Keys to use to create an captured group object.\n * @param {boolean} addPositions Whether to include positions in the return.\n * @example\n *\n```js\nconst re = /(test) inside of a (string)(\\d)?/ig\nconst s = 'Test inside of a STRING1. TEST inside of a string.'\nconst keys = ['test', 'string', 'number']\nconst res = mismatch(re, s, keys)\n\n// result:\n[\n {\n   test: 'Test',\n   string: 'STRING',\n   number: '1',\n },\n {\n   test: 'TEST',\n   string: 'string',\n },\n]\n```\n */\nexport default function mismatch(re, string, keys, addPositions = false) {\n  /** @type {!Array<!Object<string, string>>} */\n  const m = []\n  string.replace(re, (match, ...args) => {\n    // remove position and input\n    const position = args[args.length - 2]\n    const start = addPositions ? { position } : {}\n    const p = args.slice(0, args.length - 2)\n    const o = p.reduce((acc, capturedGroup, i) => {\n      const key = keys[i]\n      if (!(key && capturedGroup !== undefined)) return acc\n      acc[key] = capturedGroup\n      return acc\n    }, start)\n    m.push(o)\n  })\n  return m\n}","const nameRe = /([^\\s>=/]+)/\nconst valRe = /(?:\"([\\s\\S]*?)\"|'([\\s\\S]*?)')/\n\nexport const attributeRe = new RegExp(`${nameRe.source}(?:\\\\s*=\\\\s*${valRe.source})?`, 'g')\n\n/**\n * This regex will match all attributes as a string inside of element, e.g., matching `<el attr=\"abc\" bool/>` will result in `attr=\"abc\" bool`.\n */\nexport const attributesRe = new RegExp(`(?:\\\\s+((?:${attributeRe.source}\\\\s*)*))`)\n","import mismatch from 'mismatch'\nimport { extractProps as extractPropsSpec, getPropValue } from './lib'\nimport { attributesRe } from './lib/res'\nimport { attributesRe as simple, attributeRe as simpleAttribute } from './lib/res-simple'\n\nconst execRes = (re, s) => {\n  const res = re.exec(s)\n  if (!res) return res\n  const [, ...args] = res\n  return args\n}\n\n/**\n * Extract member elements from an XML string. Numbers and booleans will be parsed into their JS types.\n * @param {string|!Array<string>} tag Which tag to extract, e.g., `div`. Can also pass an array of tags, in which case the name of the tag will also be returned.\n * @param {string} string The XML string.\n * @example\n *\n * const xml = `\n * <html>\n *   <div id=\"1\" class=\"test\" contenteditable>\n *     Hello World\n *   </div>\n * </html>\n * `\n * const [{ content, props }] = extractTag('div', xml)\n * // content: Hello World\n * // props: { id: 1, class: 'test', contenteditable: true }\n */\nconst extractTags = (tag, string) => {\n  const tags = Array.isArray(tag) ? tag : [tag]\n  const t = tags.join('|')\n  const end1 = /\\s*\\/>/\n  const end2 = />([\\s\\S]+?)?<\\/\\1>/\n  const re = new RegExp(`<(${t})${simple.source}?(?:${end1.source}|${end2.source})`, 'g')\n\n  const matches = mismatch(re, string, ['t', 'a', 'v', 'v1', 'v2', 'c'])\n  const res = matches.map(({ 't': tagName, 'a': attributes = '', 'c': content = '' }) => {\n    const attrs = attributes.replace(/\\/$/, '').trim()\n    const props = extractProps(attrs)\n    return { content, props, tag: tagName }\n  })\n  return res\n}\n\n/**\n * Extracts the properties from the attributes part of the tag and returns them as an object. It will parse values if not specified otherwise.\n * @param {string} string The attribute part of the tag.\n * @param {boolean} parseValue Whether to transform the value into its value.\n */\nexport const extractProps = (string, parseValue = true) => {\n  const m = mismatch(simpleAttribute, string, ['key', 'val', 'def', 'f'])\n  const props = m\n    .reduce((acc, { 'key': key, 'val': val }) => {\n      if (val === undefined) {\n        acc[key] = true\n        return acc\n      }\n      acc[key] = parseValue ? getPropValue(val) : val\n      return acc\n    }, {})\n  return props\n}\n\n/**\n * Extract member elements from an XML string using the complex regular expression to match attributes that confirms to the XML spec. Numbers and booleans will be parsed into their JS types.\n * @param {string} tag Which tag to extract, e.g., `div`.\n * @param {string} string The XML string.\n * @example\n *\n * const xml = `\n<html>\n  <div id=\"1\" class=\"test\" contenteditable>\n    Hello World\n  </div>\n</html>\n`\n * const [{ content, props }] = extractTag('div', xml)\n * // content: Hello World\n * // props: { id: 1, class: 'test', contenteditable: true }\n */\nexport const extractTagsSpec = (tag, string) => {\n  const end1 = /\\s*\\/>/\n  const end2 = new RegExp(`>([\\\\s\\\\S]+?)?</${tag}>`)\n  const re = new RegExp(`<${tag}${attributesRe.source}?(?:${end1.source}|${end2.source})`, 'gu')\n  const r = []\n\n  let t\n  while ((t = execRes(re, string))) {\n    if (!t.length) continue\n    const [_p = '', _c = ''] = t\n    const p = _p.replace(/\\/$/, '').trim()\n    const props = extractProps(p)\n    const item = {\n      props,\n      content: _c,\n    }\n    r.push(item)\n  }\n  return r\n}\n\nexport default extractTags\nexport { extractPropsSpec }","import { attributeRe } from './res'\n\nexport const getPropValue = (val) => {\n  if (val == 'true') return true\n  if (val == 'false') return false\n  if (/^\\d+$/.test(val)) {\n    return parseInt(val, 10)\n  }\n  return val\n}\n\n/**\n * Parse the arguments part of an XML element\n * @param {string} string String to extract attributes from.\n * @param {boolean} parseValue Parse `true` and `false` values into a boolean, and numbers into integers. Default `true`.\n */\nexport const extractProps = (string, parseValue = true) => {\n  const o = {}\n  const re = new RegExp(`\\\\s+${attributeRe.source}`, 'gu')\n  ;` ${string}`.replace(re, (match, name,  doubleQuoteVal, singleQuoteVal) => {\n    const value = singleQuoteVal || doubleQuoteVal\n    const v = value === undefined ? true : value\n    const val = parseValue ? getPropValue(v) : v\n    o[name] = val\n  })\n  return o\n}\n","import { Fn, fn,\n  nullable, nonNullable,\n  optional, any,\n} from './tokens'\n\n/**\n * Splits the string into tokens.\n * @param {string} s\n */\nexport const lex = (s) => {\n  const res = s.split(/([!?=*(),:.<>{}|\\s+])/g)\n  return res\n    .filter(a => /\\S/.test(a))\n    .map((a) => {\n      switch (a) {\n      case 'function': return fn\n      case 'Function': return Fn\n      case '!': return nonNullable\n      case '?': return nullable\n      case '=': return optional\n      case '*': return any\n      }\n      return a\n    })\n}\n\nexport function parser(tokens) {\n  let c = 0\n\n  const peek = () => tokens[c]\n  const peekNext = (n = 1) => tokens[c + n]\n  const consume = () => tokens[c++]\n\n  const parseFunction = () => {\n    /** @type {_typedefsParser.FunctionType} */\n    const meta = { return: null, args: [] }\n    if (peek() != '(') throw new Error('Expecting opening (')\n    consume()\n    let foundArgs\n    while(peek() != ')') {\n      if (foundArgs && peek() == 'this')\n        throw new Error('this must come first in function arguments')\n      if (foundArgs && peek() == 'new')\n        throw new Error('new must come first in function arguments')\n      if (peek() == 'this') {\n        consume()\n        if (peek() != ':') throw new Error('Expecting :')\n        consume()\n        meta.this = parseType()\n      } else if (peek() == 'new') {\n        consume()\n        if (peek() != ':') throw new Error('Expecting :')\n        consume()\n        meta.new = parseType()\n      } else if (peek() == '.' && peekNext() == '.' && peekNext(2) == '.') {\n        consume()\n        consume()\n        consume()\n        const type = parseType()\n        if (peek() != ')') throw new Error('Variable args must come last')\n        meta.variableArgs = type\n      } else {\n        const arg = parseType()\n        meta.args.push(arg)\n        if (peek() == '=') {\n          arg.optional = true\n          consume()\n        }\n      }\n      foundArgs = true\n      if (peek() == ')') {\n        break\n      }\n      if (peek() == ',') consume()\n      else throw new Error('Expecting , between arguments')\n    }\n    consume()\n\n    if (peek() == ':') {\n      consume()\n      const ret = parseType()\n      if (ret.name == undefined && ret.nullable)\n        // special case\n        ret.name = ''\n      meta.return = ret\n    }\n    return meta\n  }\n  const parseApplication = () => {\n    const apps = []\n    while(peek() != '>') {\n      const application = parseType()\n      apps.push(application)\n      if (peek() == '>') {\n        break\n      }\n      if (peek() == ',') consume()\n      else throw new Error('Expecting , between applications')\n    }\n    consume()\n    return apps\n  }\n\n  const parseRecord = () => {\n    const props = {}\n    while(peek() != '}') {\n      const propName = peek()\n      consume()\n      props[propName] = null\n      if (peek() == ':') {\n        consume()\n        try {\n          const type = parseType()\n          props[propName] = type\n        } catch (err) {\n          err.message += `(when parsing ${propName} property)`\n          throw err\n        }\n      }\n      if(peek() == '}') {\n        consume()\n        break\n      }\n      if (peek() != ',') {\n        throw new Error(`Expecting , for record after ${propName}`)\n      }\n      consume()\n    }\n    return props\n  }\n\n  const parseType = (specialAllowed = true, union = []) => {\n    /** @type {!_typedefsParser.Type} */\n    let type = {}\n    let applicationWithDot\n    /** @type {string} */\n    let token = peek()\n    if ([nullable, nonNullable].includes(token)) {\n      // can repeat for all specials but don't\n      if (!specialAllowed) throw new Error(`${token} not allowed after .`)\n      type.nullable = token === nullable\n      consume()\n    }\n    token = peek()\n    if (token == '(') { // union, consider cases without ()\n      consume()\n      type = {\n        ...parseType(true, []),\n        ...type, // preserve nullable\n      }\n      if (peek() != ')') throw new Error('Expecting closing )')\n      consume()\n      if (peek() != '|') {\n        return type\n      }\n    } else if (token == '{') {\n      consume()\n      type.record = parseRecord()\n      return type\n    }\n\n    if ([nonNullable, nullable].includes(token))\n      throw new Error('Nullability already defined.')\n    if (/[=),:.<>}|]/.test(token))\n      throw new Error(`Unexpected token ${token}.`)\n\n    if (peek() != '|') {\n      type.name = peek()\n      consume()\n    }\n    if (fn == token) {\n      type.function = parseFunction()\n    } else if (\n      peek() == '<' ||\n      (applicationWithDot = (peek() == '.' && peekNext() == '<'))\n    ) {\n      consume()\n      if (applicationWithDot) consume()\n      type.application = parseApplication()\n    }\n    while(peek() == '.') {\n      type.name += '.'\n      consume()\n      const { name } = parseType(false)\n      if (!name) throw new Error('Expected to see the name after .')\n      type.name += name\n    }\n    if (peek() != '|' || !specialAllowed) return type\n\n    union.push(type)\n    while(peek() == '|') {\n      consume()\n      const nextType = parseType(true, union)\n\n      // const u = nextType.union ? nextType.union : [nextType]\n      if(nextType.union !== union) union.push(nextType)\n    }\n    /** @type {!_typedefsParser.Type} */\n    const unionType = { union }\n    return unionType\n  }\n\n  return parseType()\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('.').Type} _typedefsParser.Type\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('.').FunctionType} _typedefsParser.FunctionType\n */","export const Fn = 'Function'\nexport const fn = 'function'\nexport const nullable = 'nullable'\nexport const nonNullable = 'nonNullable'\nexport const optional = '='\nexport const any = 'any'","import { lex, parser } from './lib'\n\n/**\n * The Parser For JSDoc Types.\n * @param {string} type The type to parse, e.g., `!Promise<!Array<function(string)>>`\n */\nexport default function parse(type) {\n  const tokens = lex(type)\n  return parser(tokens)\n}\n\n/* documentary types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_typedefsParser.FunctionType} FunctionType `\uff20record` The meta information about the function.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _typedefsParser.FunctionType `\uff20record` The meta information about the function.\n * @prop {!Array<!_typedefsParser.Type>} args The arguments of the function.\n * @prop {?_typedefsParser.Type} return The return type of the function. When the value is set to `null`, it means the function does not have a return. If the return was actually `null`, it would be specified as `return: { name: 'null' }`.\n * @prop {!_typedefsParser.Type} [this] The type of the `this` argument specified as `function(this: Type)`.\n * @prop {!_typedefsParser.Type} [new] The type of the `new` argument specified as `function(new: Type)`.\n * @prop {!_typedefsParser.Type} [variableArgs] The type of the variable arguments, e.g., `function(...Type)`.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_typedefsParser.Type} Type `\uff20record` The representation of a type.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _typedefsParser.Type `\uff20record` The representation of a type.\n * @prop {boolean} [nullable] Whether the type is nullable. This is defined by writing `?` before the type name to state nullability and `!` otherwise. The parser does not infer nullability from types being primitive and `Function/function`.\n * @prop {string} [name] The name of the type.\n * @prop {!Array<!_typedefsParser.Type>} [union] If the type is defined as a union, e.g., `(string|number)`, contains the united types. Must include parenthesis.\n * @prop {!Object<string, _typedefsParser.Type>} [record] If the type is a record, contains its representation. If a property of the record does not have a type, it will be set to null.\n * @prop {!Array<!_typedefsParser.Type>} [application] The application of the type, e.g., the inner type of `Object<Application>`.\n * @prop {!_typedefsParser.FunctionType} [function] The function info with args and return if the type is a function.\n * @prop {boolean} [optional] If the type is returned as an optional argument of a function (`function(string=)`), this will be set to true.\n */\n","/**\n * Return a name of a property with its default value, and surrounded by square brackets if default is given. If type is boolean or number, the default value is not surrounded by \"\".\n * @param {string} name Name of the property.\n * @param {?(string|boolean|number)} [defaultValue] Default of the property.\n * @param {string} [type] Type of the property.\n * @param {string} [parentParam] Name of the parent parameter.\n * @example\n *\n * requiredParam\n * [optionalDefaultParam=false]\n * [optionalDefaultParamString=\"test\"]\n * [optionalParam]\n *\n * parentParam.requiredParam\n * [parentParam.optionalDefaultParam=false]\n * [parentParam.optionalDefaultParamString=\"test\"]\n * [parentParam.optionalParam]\n */\nexport const getNameWithDefault = (name, defaultValue, type, parentParam) => {\n  if (!name) throw new Error('The name of the property is not given')\n  const n = `${parentParam ? `${parentParam}.` : ''}${name}`\n\n  const hasDefault = defaultValue !== null\n  if (!hasDefault) return n\n\n  const isPrimitive = Number.isInteger(/** @type {number} */ (defaultValue))\n    || [true, false, 'null'].includes(defaultValue)\n    || ['number', 'boolean'].includes(type)\n  const d = isPrimitive ? defaultValue : `\"${defaultValue}\"`\n  const nn = `${n}=${d}`\n  return nn\n}\n\nexport const getPropType = ({ number, string, boolean, type }) => {\n  if (string) return 'string'\n  if (number) return 'number'\n  if (boolean) return 'boolean'\n  if (type) return type\n  return '*'\n}\n\n// update this to match what documentary has\nexport const getLink = (title, prefix = '') => {\n  const l = title\n    .replace(/<\\/?code>/g, '')\n    .replace(/<\\/?strong>/g, '')\n    .replace(/<br\\/>/g, '')\n    .replace(/&nbsp;/g, '')\n    .replace(/[^\\w-\\d ]/g, '')\n    .toLowerCase()\n    .replace(/[, ]/g, '-')\n  return `${prefix}-${l}`\n}\n\n/**\n * Prevent incorrect undefined ending.\n * @param {string} type\n */\nexport const makeOptional = (type) => {\n  let t\n  if (/[^\\w\\d._]/.test(type)) t = `(${type})`\n  else t = type\n  return `${t}|undefined`\n}\n\nexport const makeBlock = (s) => {\n  if (!s) return `/**\n */\n`\n  return `/**\n${s}\n */\n`\n}\n\nexport const addSuppress = (line) => {\n  const m = ` * @suppress {nonStandardJsDocs}\n${line}`\n  return m\n}\n\n/**\n * @param {?string} namespace\n * @param {string} name\n * @param {?string} [constr] The signature of the constructor for constructors and interfaces.\n */\nexport const getExternDeclaration = (namespace, name, constr) => {\n  const ns = namespace ? `${namespace}.` : ''\n  const v = namespace ? '' : 'var '\n  let res = `${v}${ns}${name}`\n  if (constr) res = res + ` = ${constr}`\n  return res\n}\n\n/**\n * @param {string} d\n */\nexport const trimD = d => {\n  d = d.trimRight()\n\n  const m = /\\S/.exec(d)\n  if (!m) return d\n  const i = m.index\n\n  if (i == 0) return d\n  const s = d.substr(0, i)\n  let n = s.lastIndexOf('\\n')\n  // remove everything before first /n\n  if (n == -1) n = 0\n  else {\n    n++\n    d = d.substr(n)\n  }\n  const ws = i - n\n  const w = ' '.repeat(ws)\n  const dd = d.split('\\n')\n  const a = dd.filter(b => /\\S/.test(b))\n  const notWithSpace = a.find(b => {\n    const res = !b.startsWith(w)\n    return res\n  })\n  if (!notWithSpace) {\n    const re = new RegExp(`^ {${ws}}`)\n    return dd.map(b => b.replace(re, '')).join('\\n')\n  } else return d.trim()\n}","// import parse from '@typedefs/parser'\nimport extractTags from 'rexml'\nimport { trimD, getPropType } from './'\n\n/**\n * @implements {_typal.Arg}\n */\nexport default class Arg {\n  constructor() {\n    /** @type {?string} */\n    this.name = null\n    /** @type {string} */\n    this.type = ''\n    /** @type {boolean} */\n    this.optional = false\n    /** @type {string} */\n    this.description = ''\n\n    // /**\n    //  * Shows if this argument indicates the constructor type, e.g.,\n    //  * function(new: Example)\n    //  */\n    // this.isNew = false\n  }\n  fromXML(content,\n    { 'name': name, 'string': string, 'boolean': boolean, 'opt': opt, 'number': number, 'type': type },\n    rootNamespace) {\n    if (!name) throw new Error('Argument does not have a name.')\n    this.name = name\n    if (content) this.description = trimD(content)\n    let t = getPropType({ number, string, boolean, type })\n    if (rootNamespace) {\n      const s = new RegExp(`([!?])?${rootNamespace}\\\\.`, 'g')\n      t = t.replace(s, '$1')\n    }\n    if (t.endsWith('=')) {\n      t = t.replace(/=$/, '')\n      opt = true\n    }\n    this.type = t\n    if (opt) this.optional = true\n    // if (name.startsWith('...')) this.optional = true\n    // /**\n    //  * @type {_typedefsParser.Type}\n    //  */\n    // this.parsed = null\n    // try {\n    //   this.parsed = parse(this.closureType)\n    // } catch (err) { /* ok */\n    // }\n  }\n  get fullType() {\n    if (this.optional) return `${this.type}=`\n    return this.type\n  }\n  // get isParsedFunction() {\n  //   return this.parsed && this.parsed.name == 'function'\n  // }\n  // toTypescriptType() {\n  //   if (this.isParsedFunction) {\n  //     const { function: { args, return: ret } } = this.parsed\n  //     return `(${\n  //       args.map(({ name, type, optional }) => {\n  //         return `${name}${optional ? '?' : ''}: ${type}`\n  //         // return type + (optional ? '=' : '')\n  //       }).join(', ')\n  //     }) => ${ret}`\n  //   }\n  //   return this.type\n  // }\n}\n\n// /**\n//  * @param {_typedefsParser.Type} type\n//  */\n// const typeToTypescript = (type) => {\n//   const { function,   } = type\n//   return `(${\n//     args.map(({ name, type, optional }) => {\n//       return `${name}${optional ? '?' : ''}: ${type}`\n//       // return type + (optional ? '=' : '')\n//     }).join(', ')\n//   }) => ${ret}`\n// }\n\n/**\n * @param {string} content\n * @param {?string} [rootNamespace] The namespace to omit.\n */\nexport const extractArgs = (content, rootNamespace) => {\n  let ai = content.lastIndexOf('</arg>')\n  let newContent = content\n  /** @type {!Array<!Arg>} */\n  let argsArgs = []\n  if (ai != -1) {\n    ai = ai + '</arg>'.length\n    const pre = content.slice(0, ai)\n    newContent = content.slice(ai)\n    argsArgs = extractTags('arg', pre)\n    argsArgs = argsArgs.map(({ content: ac, props: ap }) => {\n      const ar = new Arg()\n      ar.fromXML(ac, ap, rootNamespace)\n      return ar\n    })\n  }\n  return { newContent, argsArgs }\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('@typedefs/parser').Type} _typedefsParser.Type\n */","import parse from '@typedefs/parser'\nimport { getPropType, getNameWithDefault, makeOptional, trimD } from './'\nimport Arg from './Arg' // eslint-disable-line\nimport serialise from './serialise'\n\n/**\n * Representation of a property of a type.\n * @implements {_typal.Property}\n */\nexport default class Property {\n  /**\n   * @param {Array<!Arg>} [args] If a property was written as a function with inner\n   * <arg> elements, this array will contain parsed entries.\n   */\n  constructor(args = null) {\n    /**\n     * The name of the property.\n     * @type {?string}\n     */\n    this.name = null\n    /**\n     * The description of the property.\n     * @type {?string}\n     */\n    this.description = null\n    /**\n     * The type of the property.\n     * @type {?string}\n     */\n    this._type = null\n    /**\n     * The override on the type in externs.\n     * @type {string}\n     */\n    this.closureType = ''\n    /**\n     * The actual `closure` attribute.\n     * @type {?string}\n     */\n    this._closure = null\n    /**\n     * The default value of the property. If the default is given as null, it will be record not as `null` but as `\"null\"` here.\n     * @type {?(string|boolean|number)}\n     */\n    this.default = null\n    /**\n     * If the property is optional.\n     * @type {boolean}\n     */\n    this.optional = false\n    /**\n     * What aliases the property has.\n     * @type {!Array<string>}\n     */\n    this.aliases = []\n\n    /**\n     * Whether to skip function params serialisation (e.g., in case it's working incorrectly).\n     */\n    this.noParams = false\n    /**\n     * The parsed type.\n     * @type {?_typedefsParser.Type}\n     */\n    this.parsed = null\n\n    this.args = args\n\n    /**\n     * Whether this property is a static method.\n     * @type {boolean}\n     */\n    this._static = false\n\n    /**\n     * If this property of a type is its constructor.\n     */\n    this.isConstructor = false\n  }\n  /**\n   * For README documentation.\n   * Serialises functions to TypeScript, e.g.,\n   * (param: string) => void\n   */\n  toTypeScriptFunction(serialiseType) {\n    if (!this.parsed) throw new Error('The property was not parsed.')\n    const { function: { args, return: ret } } = this.parsed\n    const a = args\n      .map((ar) => serialiseType(ar))\n      .map((type, i) => {\n        const { optional: argOptional } = args[i]\n        let {\n          name = `arg${i}`, optional = argOptional,\n        } = this.args[i] || {}\n        name = `${name}${optional ? '?' : ''}`\n        return `${name}: ${type}`\n      })\n    const j = a.join(', ')\n    const r = ret ? serialiseType(ret) : '?'\n    const typeName = `(${j}) => ${r}`\n    return typeName\n  }\n  clearNamespace(namespace, s = new RegExp(`([!?])?${namespace}\\\\.`, 'g')) {\n    if (!namespace) return\n    this.type = this.type.replace(s, '$1')\n    return s\n  }\n  /**\n   * When writing externs, this will prevent adding `.prototype`, e.g.,\n   * `Type.static` instead of `Type.prototype.static`.\n   */\n  get static() {\n    return this._static\n  }\n  static fromXML(...args) {\n    const prop = new Property()\n    prop.fromXML(...args)\n    return prop\n  }\n  /**\n   * Whether the property has the default value.\n   * @type {boolean}\n   */\n  get hasDefault() {\n    return this.default !== null\n  }\n  fromXML(content,\n    {\n      'name': name, 'string': string, 'boolean': boolean, 'opt': opt, 'number': number,\n      'type': type, 'default': def, 'closure': closure, 'alias': alias, 'aliases': aliases,\n      'noParams': noParams, 'static': Static, 'initial': initial },\n  ) {\n    if (!name) throw new Error('Property does not have a name.')\n    this.name = name\n    if (content) this.description = trimD(content)\n    const t = getPropType({ number, string, boolean, type })\n\n    if (noParams) this.noParams = noParams\n\n    if (closure) this._closure = closure\n\n    this.type = t\n\n    if (def !== undefined) this.default = def\n    else if (initial !== undefined) this.default = initial\n\n    if (opt || def !== undefined /* but not initial */) this.optional = true\n    if (alias) this.aliases = [alias]\n    if (aliases) this.aliases = aliases.split(/\\s*,\\s*/)\n\n    if (Static) this._static = true\n  }\n  get type() {\n    return this._type || '*'\n  }\n  /**\n   * Type can be overridden when removing namespace from properties.\n   */\n  set type(value) {\n    this._type = value || null\n    this.closureType = this._closure || this._type || ''\n    // can also check if closure changed or just type\n    if (!this.noParams) {\n      try {\n        this.parsed = parse(this.closureType)\n        if (this.isParsedFunction && !this.args) this.args = []\n      } catch (err) { /* ok */\n        this.parsed = null\n      }\n    }\n  }\n  /**\n   * Returns the first line of JSDoc, e.g., `{type} Description`.\n   */\n  toJSDoc(parentParam = null, closure = false, useNamespace = closure) {\n    if (!this.name) throw new Error('Property does not have a name. Has it been constructed using fromXML?')\n    const nameWithDefault = getNameWithDefault(this.name, this.optional ? this.default : null, this.type, parentParam)\n    const name = this.optional ? `[${nameWithDefault}]` : nameWithDefault\n    const { descriptionWithDefault } = this\n    const t = descriptionWithDefault ? ` ${descriptionWithDefault}` : ''\n\n    const type = this.getTypedefType(closure, useNamespace)\n    const s = `{${type}} ${name}${t}`\n    return s\n  }\n  get descriptionWithDefault() {\n    let s = this.description || ''\n    const d = this.hasDefault ? `${/``` */.test(this.description) ? '\\n' :\n      (s ? ' ' : '')}Default \\`${this.default}\\`.` : ''\n    return `${s}${d}`\n  }\n  toProp(closure = false, useNamespace = closure) {\n    const jsdoc = this.toJSDoc(null, closure, useNamespace)\n    const t = indentWithAster(jsdoc, true)\n    const p = ` * @prop ${t}`\n    return p\n  }\n  /**\n   * If the property is function, returns the heading above it for jsdoc.\n   */\n  toHeading() {\n    const pp = []\n    const { function: { args, return: ret } } = this.parsed\n    const a = args.map(ar => serialise(ar))\n    a.forEach((s, i) => {\n      const { optional } = args[i]\n      const { name = `arg${i}`, description } = this.args[i] || {}\n      const arg = optional ? `[${name}]` : name\n      const d = description ? ` ${description}` : ''\n\n      pp.push(` * @param {${s}${optional ? '=' : ''}} ${arg}${d}`)\n    })\n    if (ret && ret.name != 'void') { // vs code assumes void with no return\n      const r = serialise(ret)\n      pp.push(` * @return {${r}}`)\n    }\n    return pp\n  }\n  /**\n   * Generates string to append to methods when assigning to variables in externs.\n   * Only works for functions.\n   * E.g., `= function(arg1, arg2) {}`.\n   */\n  toExternsAssignment() {\n    if (this.isParsedFunction) {\n      const { function: { args } } = this.parsed\n      const a = args.map((_, i) => {\n        const { name = `arg${i}` } = this.args[i] || {}\n        return name\n      })\n      return ` = function(${a.join(', ')}) {}`\n    } else if (this.type.startsWith('function(')) { // if couldn't parse\n      return ' = function() {}'\n    }\n    return ''\n  }\n  get isParsedFunction() {\n    return !!this.parsed && this.parsed.name == 'function'\n  }\n  /**\n   * Create type for VSCode.\n   * Used to generate types of **functions**, e.g., when the property is `function` or `fn`.\n   * If closure FLAG was set, it will override it.\n   * @param {boolean} [closure]\n   * @param {boolean} [useNamespace]\n   */\n  getTypedefType(closure = false, useNamespace = closure) {\n    if (closure) return this.closureType\n    if (!this.isParsedFunction) return this.type\n\n    return this.toTypeScriptFunction(serialise)\n  }\n  toExtern(ws = '') {\n    let pp = []\n    const { descriptionWithDefault } = this\n    if (descriptionWithDefault) {\n      const d = indentWithAster(descriptionWithDefault)\n      pp.push(d)\n    }\n    if (!this.optional && this.isParsedFunction) {\n      const lines = this.toHeading()\n      pp.push(...lines)\n    } else {\n      const t = this.optional ? makeOptional(this.closureType) : this.closureType\n      pp.push(` * @type {${t}}`)\n    }\n    if (ws) pp = pp.map(p => `${ws}${p}`)\n    return pp.join('\\n')\n  }\n  toParam(parentParam, ws = '', closure = false) {\n    const s = this.toJSDoc(parentParam, closure)\n    const p = `${ws} * @param ${s}`\n    return p\n  }\n  makeAlias(name) {\n    const clone = /** @type {!Property} */ (Object.assign(Object.create(Object.getPrototypeOf(this)), this))\n    clone.description = `An alias for \\`${this.name}\\`.`\n    clone.name = name\n    return clone\n  }\n}\n\nconst indentWithAster = (description, skipFirst = false) => {\n  const d = description.split('\\n').map((l, i) => {\n    if (skipFirst && !i) return l\n    let s = ' *'\n    if (l.length) s += ' '\n    s += l\n    return s\n  }).join('\\n')\n  return d\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('@typedefs/parser').Type} _typedefsParser.Type\n */","import parse from '@typedefs/parser'\nimport { getLink } from './'\n\n/**\n * Iterates through the types to find the referenced one, and returns a string which contains a link to it.\n * @param {!Array<!_typal.Type>} allTypes\n * @param {string|!_typedefsParser.Type} type\n * @param {!_typal.LinkingOptions} [opts]\n */\nexport const getLinks = (allTypes, type, opts = {}) => {\n  let parsed\n  if (typeof type == 'object') parsed = type\n  else try {\n    parsed = parse(type) // should parse type when added\n    if (!parsed) {\n      console.log('Could not parse %s', type)\n    }\n  } catch (err) {\n    console.log('Could not parse %s', type)\n    console.error(err.message)\n  }\n  if (!parsed) return type\n  const s = parsedToString(parsed, allTypes, opts)\n  return s\n}\n\n/**\n * @param {!_typedefsParser.Type} type\n * @param {!Array<!_typal.Type>} allTypes\n * @param {!_typal.LinkingOptions} opts\n */\nexport const parsedToString = (type, allTypes, opts = {}) => {\n  if (type.name == '' && type.nullable) return '?' // special case\n  const { escapePipe = true } = opts\n  let s = ''\n  let nullable = ''\n  if (type.nullable) nullable = '?'\n  else if (type.nullable === false) nullable = '!'\n  const p2s = (arg) => parsedToString(arg, allTypes, opts)\n\n  if (type.function) {\n    s += nullable\n    s += type.name + '(' // Function or function\n    const args = []\n    if (type.function.this) {\n      let t = 'this: '\n      t += p2s(type.function.this)\n      args.push(t)\n    }\n    if (type.function.new) {\n      let t = 'new: '\n      t += p2s(type.function.new)\n      args.push(t)\n    }\n    type.function.args.forEach((a) => {\n      let t = p2s(a)\n      if (a.optional) t += '='\n      args.push(t)\n    })\n    if (type.function.variableArgs) {\n      let t = '...'\n      t += p2s(type.function.variableArgs)\n      args.push(t)\n    }\n    const argsJoined = args.join(', ')\n    s += argsJoined + ')'\n    if (type.function.return) {\n      s += ': ' + p2s(type.function.return)\n    }\n  } else if (type.record) {\n    s += '{ '\n    const rs = Object.keys(type.record).map((key) => {\n      const val = type.record[key]\n      if (!val) return key\n      const v = p2s(val)\n      return `${key}: ${v}`\n    })\n    s += rs.join(', ')\n    s += ' }'\n  } else if (type.application) {\n    s += getTypeWithLink(/** @type {string} */ (type.name), allTypes, nullable, opts) + '&lt;'\n    const apps = type.application.map((a) => {\n      return p2s(a)\n    })\n    s += apps.join(', ')\n    s += '&gt;'\n  } else if (type.union) {\n    s += nullable\n    s += '('\n    const union = type.union.map((u) => {\n      return p2s(u)\n    })\n    s += union.join(escapePipe ? ' \\\\| ' : ' | ')\n    s += ')'\n  } else {\n    const name = type.name == 'any' ? '*' : type.name\n    s += getTypeWithLink(/** @type {string} */ (name), allTypes, nullable, opts)\n  }\n  return s\n}\n\n/**\n * The function which generates a link for the type.\n * @param {string} type\n * @param {!Array<!_typal.Type>} allTypes\n * @param {!_typal.LinkingOptions} [opts]\n */\nconst getTypeWithLink = (type, allTypes, nullable = '', opts = {}) => {\n  const { flatten = false, nameProcess,\n    link: linkFn = ({ link: l }) => `#${l}` } = opts\n  const l = getLinkToType(allTypes, type)\n  const n = `${nullable}${type}`\n  if (!l) return n\n  let { link, type: { description } } = l\n  link = linkFn(l)\n  if (flatten) {\n    const found = allTypes.find(({ fullName }) => fullName == type)\n    if (found && found.link) {\n      link = found.link\n    }\n    if (!description && found.description) description = found.description\n    if (typeof flatten == 'function') flatten(type)\n  }\n  const nn = nameProcess ? nameProcess(n) : n\n  if (!description) return `[${nn}](${link})`\n  return `<a href=\"${link}\" title=\"${description.replace(/\"/g, '&quot;')}\">${nn}</a>`\n  // const typeWithLink = `[${n}](#${link})`\n  // return typeWithLink\n}\n\n// const li = (p) => {\n//   return p.replace(/(^\\s*)- (.+)$/mg, `$1<li>$2</li>`)\n// }\n\n\n/**\n * @param {!Array<!_typal.Type>} allTypes\n * @param {string} type\n */\nconst getLinkToType = (allTypes, type) => {\n  const linkedTypes = allTypes.filter(({ fullName }) => fullName == type)\n  if (!linkedTypes.length) return\n\n  // in case we're importing local types and imports have same names\n  const importType = linkedTypes.find(({ import: i }) => i || false)\n  const actualType = linkedTypes.find(({ import: i }) => !i)\n\n  let linkedType = actualType || importType\n\n  const link = getLink(linkedType.fullName, 'type')\n  return { link, type: linkedType }\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../types').Type} _typal.Type\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../types').LinkingOptions} _typal.LinkingOptions\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('@typedefs/parser').Type} _typedefsParser.Type\n */","import { getLinks } from './get-links'\n\n/**\n * @param {!_typal.Type} type The type for which to make the table\n * @param {!Array<!_typal.Property>} [props]\n * @param {!Array<!_typal.Type>} [allTypes]\n * @param {!_typal.ToMarkdownOptions} [opts]\n */\nexport default function makePropsTable (type, props = [], allTypes = [], opts = {}) {\n  const { narrow = false, flatten = false, preprocessDesc, link } = opts\n  if (!props.length) return ''\n  const constr = type.isConstructor || type.isInterface\n  const anyHaveDefault = props.some(({ hasDefault }) => hasDefault)\n\n  const linkOptions = /** @type {!_typal.LinkingOptions} */ ({\n    flatten,\n    escapePipe: !narrow,\n    link,\n  })\n  const links = (s) => getLinks(/** @type {!Array<!_typal.Type>} */ (allTypes), s, linkOptions)\n  const ps = props.map((prop) => {\n    let typeName\n    if (prop.args && prop.isParsedFunction) {\n      typeName = prop.toTypeScriptFunction(links)\n      if (prop.isConstructor) typeName = `new ${typeName}`\n    } else\n      typeName = links(prop.parsed || prop.type)\n    // constructors and interfaces will always have to initialise properties\n    // their `this` properties in the constructor.\n    const name = (constr || prop.optional) ? prop.name : `${prop.name}*`\n    const d = !prop.hasDefault ? '-' : `\\`${prop.default}\\``\n    const de = preprocessDesc ? preprocessDesc(prop.description) : prop.description\n    return {\n      prop,\n      typeName,\n      name,\n      de: esc(de, !narrow),\n      d,\n    }\n  })\n  if (narrow) { // narrow is the newer API for Documentary\n    return { props: ps, anyHaveDefault, constr }\n  }\n  const ar = ps.map(({\n    name, typeName, de, d, prop,\n  }) => {\n    const n = prop.optional ? name : `__${name}__`\n    return [n, `<em>${typeName}</em>`, de, ...(anyHaveDefault ? [d] : [])]\n  })\n\n  const h = ['Name',\n    ...(narrow ? ['Type & Description'] : ['Type', 'Description']),\n    ...(anyHaveDefault ? [constr ? 'Initial' : 'Default'] : [])]\n\n  const j = JSON.stringify([h, ...ar], null, 2)\n  return `\n\n\\`\\`\\`table\n${j}\n\\`\\`\\``\n}\n\nconst esc = (s = '', escapePipe = true) => {\n  if (s === null) s = ''\n  if (escapePipe) {\n    s = s.replace(/\\|/g, '\\\\|')\n  }\n  return s\n    .replace(/</g, '&lt;')\n    .replace(/>/, '&gt;')\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../types').Type} _typal.Type\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../types').Property} _typal.Property\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../types').ToMarkdownOptions} _typal.ToMarkdownOptions\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../types').LinkingOptions} _typal.LinkingOptions\n */\n","import extractTags from 'rexml'\nimport Property from './Property'\nimport { addSuppress, makeBlock, getExternDeclaration, makeOptional } from './'\nimport { trimD } from './'\nimport Arg, { extractArgs } from './Arg' // eslint-disable-line\nimport { getLinks } from './get-links'\nimport makePropsTable from './make-props-table'\n\n/**\n * A representation of a type.\n * @implements {_typal.Type}\n */\nexport default class Type {\n  constructor() {\n    /**\n     * The name of the type.\n     * @type {string}\n     */\n    this.name = ''\n    /** @type {?string} */\n    this.type = null\n    /**\n     * An overriding type for closure to generate externs, e.g.,\n     * `function(string): boolean` instead of `(s:string) => boolean`.\n     * @type {?string}\n     * @deprecated\n     */\n    this.closureType = null\n    /** @type {?string} */\n    this.description = null\n    /** @type {boolean} */\n    this.noToc = false\n    /** @type {boolean} */\n    this.spread = false\n    /** @type {boolean} */\n    this.noExpand = false\n    /** @type {?string} */\n    this.link = null\n    /** @type {!Array<!Property>} */\n    this.properties = []\n    /**\n     * The type's namespace, e.g., `typal`.\n     * @type {?string}\n     */\n    this.namespace = null\n    /**\n     * @type {boolean}\n     * Whether the externs should have the form of\n```js\n/\uff0a\uff0a @constructor \uff0a/\n_ns.Type\n/\uff0a\uff0a @boolean \uff0a/\n_ns.Type.prototype.isConstructor\n```\n     */\n    this.isConstructor = false\n    /**\n     * @type {boolean}\n     * Same as `constructor`, but with `@interface` annotation.\n     */\n    this.isInterface = false\n\n    /**\n     * @type {boolean}\n     * Same as `constructor`, but with `@record` annotation.\n     */\n    this.isRecord = false\n    /**\n     * Types `@constructor`, `@interface` and `@record` can inherit properties from other types using `@extends`.\n     * @see https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#extends-type\n     * @type {?string}\n     */\n    this.extends = null\n\n    /**\n     * @type {Array<!Arg>}\n     */\n    this.args = null\n  }\n  get import() {\n    return false\n  }\n  /**\n   * Create type from the xml content and properties parsed with `rexml`.\n   */\n  fromXML(content, {\n    'name': name, 'type': type, 'desc': desc, 'noToc': noToc, 'spread': spread,\n    'noExpand': noExpand, 'link': link, 'closure': closure,\n    'constructor': isConstructor, 'extends': ext, 'interface': isInterface,\n    'record': isRecord,\n  }, namespace, rootNamespace = null) {\n    if (!name) throw new Error('Type does not have a name.')\n    this.name = name\n\n    if (type) this.type = type\n    if (closure) this.closureType = closure\n    else this.closureType = this.type\n    if (desc) this.description = trimD(desc)\n    this.noToc = !!noToc\n    this.spread = !!spread\n    this.noExpand = !!noExpand\n    if (link) this.link = link\n    if (isConstructor === true) this.isConstructor = isConstructor\n    if (isInterface === true) this.isInterface = isInterface\n    if (isRecord === true) this.isRecord = isRecord\n    if (ext) this.extends = ext\n\n    if (content) {\n      const ps = extractTags('prop', content)\n      const props = ps.map(({ content: c, props: p }) => {\n        const pr = new Property()\n        pr.fromXML(c, p)\n        return pr\n      })\n      const functions = extractTags(['function', 'fn', 'static'], content)\n\n      const fnProps = functions.map(({ content: c, props: p, tag }) => {\n        const isStatic = tag == 'static'\n        const { newContent, argsArgs } = extractArgs(c, rootNamespace)\n\n        const {\n          'async': async, 'void': Void, 'return': ret = Void ? 'void' : '',\n          ...rest\n        } = p\n        let { 'args': args = '' } = p\n\n        if (!args) {\n          args = argsArgs.map(({ fullType }) => fullType).join(',')\n        }\n\n        let r = ret.replace(/\\n\\s*/g, ' ')\n        if (async && r) r = `!Promise<${r}>`\n        else if (async) r = '!Promise'\n        // generate function string which will be parsed\n        // a hack to convert args into _typedefParser.Type\n        let fnType = `function(${args})`\n        if (r) fnType += `: ${r}`\n        rest['type'] = fnType // e.g., a prop will have type `function()`\n        const pr = new Property(argsArgs)\n\n        pr.fromXML(newContent, rest)\n        if (isStatic) pr._static = true\n        return pr\n      })\n      const all = [...props, ...fnProps]\n      const { s, n } = all.reduce((acc, p) => {\n        if (p.static) acc.s.push(p)\n        else acc.n.push(p)\n        return acc\n      }, { s: [], n: [] })\n      this.properties = [...s, ...n]\n    }\n    if (namespace) this.namespace = namespace\n  }\n  get shouldPrototype() {\n    return this.isConstructor || this.isInterface || this.isRecord\n  }\n  /**\n   * When printing to externs, this is the right-hand part.\n   * Used in constructors, interfaces.\n   * @example\n   * _ns.Type = function(paramA, paramB)\n   * @param {!Array<!Arg>} array The parsed arguments\n   */\n  // * @param {string} string The inner arguments part as string\n  setAssignment(array) {\n    // this._assignmentString = string\n    this.args = array\n  }\n  toExtern() {\n    let s\n    if (this.closureType) { //  && !(this.isConstructor || this.isInterface)\n      s = ` * @typedef {${this.closureType}}`\n    } else if (!this.shouldPrototype) {\n      const nn = getSpread(this.properties, true)\n      s = ` * @typedef {${nn}}`\n    }\n    if (s) {\n      if (this.description) s = ` * ${this.description}\\n${s}`\n      s = makeBlock(s)\n      s = s + getExternDeclaration(this.namespace, this.name)\n      return s\n    }\n    // constructor\n    return this.toPrototype()\n  }\n  /**\n   * @param {boolean} [useNamespace=false]\n   */\n  getFullNameForExtends(useNamespace = false) {\n    const name = `${this.extends ? '$' : ''}${this.name}`\n    const n = useNamespace ? `${this.ns}${name}` : name\n    return n\n  }\n  getTypedefType() {\n    return 'Object'\n  }\n  /**\n   * Removes the namespace from the type.\n   * @param {string} rootNamespace\n   * @param {!RegExp} [s] Constructed regex.\n   */\n  clearNamespace(rootNamespace, s = new RegExp(`([!?])?${rootNamespace}\\\\.`, 'g')) {\n    if (this.type) this.type = this.type.replace(s, '$1')\n    if (this.extends) this.extends = this.extends.replace(s, '$1')\n    return s\n  }\n  /**\n   * Used to generate typedefs, but not externs.\n   * This covers both when extending and when not.\n   * @param {boolean} [closure=false]\n   * @param {boolean} [noSuppress=false]\n   * @param {boolean} [useNamespace=false]\n   */\n  toNaturalTypedef(closure = false, noSuppress = false, useNamespace = closure) {\n    const t = (closure ? this.closureType : this.type) || this.getTypedefType()\n    const dd = ` ${this.getFullNameForExtends(useNamespace)}${this.descriptionWithTag}`\n    const s = ` * @typedef {${t}}${dd}`\n    /**\n     * @type {!Array<!Property>}\n     */\n    const properties = this.properties ? this.properties.reduce((acc, p) => {\n      if (p._static) return acc\n      acc.push(p)\n      const a = p.aliases.map(al => p.makeAlias(al))\n      acc.push(...a)\n      return acc\n    }, []) : []\n    const p = properties.map((pr) => {\n      const sp = pr.toProp(closure, useNamespace)\n      return sp\n    })\n    let typedef = [s, ...p].join('\\n')\n    if (closure && !noSuppress) typedef = addSuppress(typedef)\n    typedef = makeBlock(typedef)\n    return typedef\n  }\n  get descriptionWithTag() {\n    const d = this.description ? ` ${this.description}` : ''\n    const t = this.tag ? ` \\`\uff20${this.tag}\\`` : ''\n    return `${t}${d}`\n  }\n  /**\n   * Generate `@typedef` block comment for the type.\n   * @param {boolean} [closure=false]\n   * @param {boolean} [noSuppress=false]\n   * @param {boolean} [useNamespace=false]\n   */\n  toTypedef(closure = false, noSuppress = false, useNamespace = closure) {\n    const hasExtends = !!this.extends\n    const natural = this.toNaturalTypedef(closure, noSuppress, useNamespace)\n\n    const parts = []\n    // need this to be able to import types from other programs,\n    // /\u204e\u204e\n    //  \u204e @typedef {ns.Type} Type The type (that can be imported)\n    //  \u204e @typedef {Object} ns.Type The type (to use in current file)\n    //  \u204e/\n    // let pre = ''\n\n    if (this.namespace && closure) {\n      let td = ` * @typedef {${this.fullName}} ${this.name}${this.descriptionWithTag}`\n      if (closure && !noSuppress) td = addSuppress(td)\n      td = makeBlock(td)\n      parts.push(td)\n    } else if (this.namespace && useNamespace) {\n      let td = ` * @typedef {${this.fullName}} ${this.name}${this.descriptionWithTag}`\n      td = makeBlock(td)\n      parts.push(td)\n    }\n    if (hasExtends) {\n      let extended = ` * @typedef {${this.extends} & ${this.getFullNameForExtends(useNamespace)}} ${useNamespace ? this.fullName : this.name}${this.descriptionWithTag}`\n      if (closure && !noSuppress) extended = addSuppress(extended)\n      extended = makeBlock(extended)\n      parts.push(extended)\n    }\n    parts.push(natural)\n\n    return parts.join('')\n  }\n  get prototypeAnnotation() {\n    const tag = this.tag\n    if (!tag)\n      throw new Error('Unknown prototype type (not constructor or interface).')\n    return tag\n  }\n  get tag() {\n    if (this.isConstructor) return 'constructor'\n    if (this.isInterface) return 'interface'\n    if (this.isRecord) return 'record'\n    return ''\n  }\n\n  /**\n   * To heading above declaration bodies. Can be used in externs.\n   */\n  toHeading(ws = '', includePrototypeTag = true) {\n    let lines = []\n    if (this.description) lines.push(` * ${this.description}`)\n    if (this.extends) lines.push(` * @extends {${this.extends}}`)\n    if (this.args) this.args.forEach((s) => {\n      let { name, description, optional, type } = s\n      if (name.startsWith('...')) {\n        name = name.slice(3)\n        type = `...${type}`\n      }\n      const arg = optional ? `[${name}]` : name\n      const d = description ? ` ${description}` : ''\n\n      lines.push(` * @param {${type}${optional ? '=' : ''}} ${arg}${d}`)\n    })\n    if (includePrototypeTag) lines.push(` * @${this.prototypeAnnotation}`)\n    if (ws) lines = lines.map(p => `${ws}${p}`)\n    return lines\n  }\n  /**\n   * Used to place interfaces/constructor declarations in externs.\n   */\n  get constr() {\n    return this.args ? `function(${\n      this.args.map(({ name }) => name).join(', ')\n    }) {}` : null\n  }\n  /**\n   * Only used in externs.\n   */\n  toPrototype() {\n    const pp = this.toHeading()\n    // if (this.closureType) pp.push(` * @type {${this.closureType}}`)  // todo <arg>new</arg>\n    let s = makeBlock(pp.join('\\n'))\n    s = s + getExternDeclaration(this.namespace, this.name, this.constr)\n    /** @type {!Array<!Property>} */\n    const properties = this.properties.reduce((acc, p) => {\n      acc.push(p)\n      const a = p.aliases.map(al => p.makeAlias(al))\n      acc.push(...a)\n      return acc\n    }, [])\n    const t = properties.filter(({ isConstructor }) => !isConstructor).map((p) => {\n      let r = p.toExtern()\n      r = makeBlock(r)\n      const prototype = p.static ? '' : '.prototype'\n      r = r + getExternDeclaration(`${this.fullName}${prototype}`,\n        /** @type {string} */ (p.name))\n      r += p.toExternsAssignment()\n      return r\n    })\n    const j = [s, ...t].join('\\n')\n    return j\n  }\n  /**\n   * The namespace.\n   */\n  get ns() {\n    if (this.namespace) return `${this.namespace}.`\n    return ''\n  }\n  get fullName() {\n    return `${this.ns}${this.name}`\n  }\n  /**\n   * Makes JSDoc for a function.\n   * @param {string} paramName The name of the argument.\n   * @param {boolean|undefined} optional Whether the argument is optional (wrapped in [argument])\n   * @param {string} ws The whitespace prior to the param.\n   * @param {boolean|undefined} nullable Whether the argument had ! or ?.\n   */\n  toParam(paramName, optional, ws, nullable, closure = false) {\n    let n = ''\n    if (nullable === true) n = '?'\n    else if (nullable === false) n = '!'\n    const d = this.description ? ` ${this.description}` : ''\n    const nn = this.spread ? getSpread(this.properties) : (closure ? this.fullName : this.name)\n    const pn = optional ? `[${paramName}]` : paramName\n    const s = `${ws || ''} * @param {${n}${nn}} ${pn}${d}`\n    const p = this.properties && !this.noExpand ? this.properties.map((pr) => {\n      const sp = pr.toParam(paramName, ws, closure)\n      return sp\n    }) : []\n    const st = [s, ...p].join('\\n')\n    return st\n  }\n\n  /**\n   * Converts a type to a markdown string.\n   * @param {!Array<!Type>} [allTypes]\n   * @param {!_typal.ToMarkdownOptions} [opts]\n   * @todo open-details\n   */\n  toMarkdown(allTypes = [], opts = {}) {\n    const { flatten, details = /** @type {!Array<string>} */ ([]) } = opts\n    const displayInDetails = details.includes(this.name)\n    const t = this.type ? `\\`${this.type}\\`` : ''\n    let typeWithLink = t, useCode = false\n    if (this.link) {\n      typeWithLink = `[${t}](${this.link})`\n    } else if (!this.import && this.type) {\n      typeWithLink = getLinks(allTypes, this.type, opts)\n      useCode = typeWithLink != this.type\n      typeWithLink = wrapCode(typeWithLink, useCode)\n    }\n    const codedName = wrapCode(this.fullName)\n    let nn\n    if (!this.import) {\n      nn = this.noToc ? `[${codedName}](l-type)` : `[${codedName}](t-type)`\n    } else {\n      nn = `[${codedName}](l-type)`\n    }\n    const d = this.description ? `: ${this.description}` : ''\n    const twl = typeWithLink ? `${typeWithLink} ` : ''\n    let LINE = twl // `${twl}<strong>${nn}`\n    let useTag = /_/.test(nn)\n    if (this.extends) {\n      let e = `\\`${this.extends}\\``\n      const foundExt = allTypes.find(({ fullName }) => {\n        return fullName == this.extends\n      })\n      if (foundExt && foundExt.link) {\n        e = '<a '\n        if (foundExt.description) {\n          e += `title=\"${foundExt.description}\" `\n        }\n        e += `href=\"${foundExt.link}\">\\`${this.extends}\\`</a>`\n      } else {\n        const le = getLinks(allTypes, this.extends, { ...opts,\n          nameProcess: (td) => `\\`${td}\\``,\n        })\n        if (this.extends != le) e = le\n      }\n      const extendS = ` extends ${e}`\n      useTag = useTag || /_/.test(e)\n      if (useTag) LINE += '<strong>'\n      else LINE += '__'\n      LINE += nn + extendS\n      if (typeof flatten == 'function') flatten(this.extends)\n    } else {\n      if (useTag) LINE += '<strong>'\n      else LINE += '__'\n      LINE += nn\n    }\n    if (useTag) LINE += '</strong>'\n    else LINE += '__'\n    LINE += d\n    const table = makePropsTable(this, this.properties, allTypes, opts)\n    // delegate rendering to documentary\n    return { LINE, table, displayInDetails }\n  }\n}\n\nconst wrapCode = (s, useCode = false) => {\n  return `${useCode ? '<code>' : '`'}${s}${useCode ? '</code>' : '`'}`\n}\n\n/**\n * @param {!Array<!Property>} [properties]\n * @param {boolean} [closure = false] Whether generate for Closure's externs.\n */\nconst getSpread = (properties = [], closure = false) => {\n  properties = properties.reduce((acc, p) => {\n    acc.push(p)\n    const extra = p.aliases.map((a) => {\n      return { ...p, name: a }\n    })\n    acc.push(...extra)\n    return acc\n  }, [])\n  const s = properties.map(p => {\n    const type = closure ? p.closureType : p.type\n    let n = p.name, t = type\n    if (p.optional && !closure) {\n      n = `${p.name}?`\n    } else if (p.optional && closure) {\n      t = `(${makeOptional(type)})`\n    }\n    const st = `${n}: ${t}`\n    return st\n  })\n  const j = s.join(', ')\n  const st = `{ ${j} }`\n  return st\n}\n\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('@typedefs/parser').Type} _typedefsParser.Type\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../types').ToMarkdownOptions} _typal.ToMarkdownOptions\n */\n\n// /**\n//  * The function\n//  * @param {(a: string, b?:string) => void} ab\n//  */\n// const a = (ab) => {\n\n// }","import Type from './Type'\nimport { trimD } from './'\n\nexport default class Method extends Type {\n  constructor() {\n    super()\n    /** @type {?string} */\n    this._methodReturn = null\n    /** @type {boolean} */\n    this.async = false\n  }\n  get shouldPrototype() {\n    return true\n  }\n  get isMethod() {\n    return true\n  }\n  fromXML(content, { 'async': methodAsync, 'return': methodReturn,\n    ...props\n  }, ...args) {\n    this.description = trimD(content)\n    super.fromXML('', props, ...args)\n    if (methodReturn) this._methodReturn = methodReturn\n    if (methodAsync) this.async = true\n  }\n  /**\n   * If the `return` was set on type, this will return it.\n   */\n  get return() {\n    return this._methodReturn || 'void'\n  }\n  /**\n   * Same as type, but adds the return.\n   */\n  toHeading(ws = '') {\n    const lines = super.toHeading(ws, false)\n    let r\n    if (this._methodReturn) r = this.return\n    if (this.async && r) r = `Promise<${r}>`\n    else if (this.async) r = 'Promise'\n    if (r) lines.push(`${ws} * @return {${r}}`)\n\n    return lines\n  }\n  /**\n   * TypeScript-style type for typedefs.\n   */\n  getTypedefType() {\n    return `(${\n      this.args.map(({ name, type, optional }) => {\n        return `${name}${optional ? '?' : ''}: ${type}`\n        // return type + (optional ? '=' : '')\n      }).join(', ')\n    }) => ${this.return}`\n  }\n  clearNamespace(rootNamespace) {\n    const s = super.clearNamespace(rootNamespace)\n    if (this._methodReturn) this._methodReturn = this._methodReturn.replace(s, '$1')\n  }\n}","import Type from './Type'\nimport { trimD } from './'\n\n/**\n * The representation of a parsed import.\n * @implements {_typal.Import}\n */\nexport default class Import extends Type {\n  constructor() {\n    super()\n    /**\n     * The package name name from where to import.\n     * @type {string}\n     */\n    this.from = ''\n  }\n  get import() {\n    return true\n  }\n  fromXML(content, {\n    'from': from, 'name': name, ...props\n  }, namespace, rootNamespace) {\n    if (!from) throw new Error('From attribute of import is not given.')\n    this.from = from\n    this.description = trimD(content)\n\n    super.fromXML('', {\n      ...props, 'noToc': true, name,\n      type: `import('${from}').${name}`,\n    }, namespace != rootNamespace ? namespace : null)\n  }\n  toTypedef(includeNamespace = true) {\n    const n = includeNamespace ? this.fullName : this.name\n    return ` * @typedef {import('${this.from}').${this.name}} ${n}`\n  }\n}","export default os\nexport const {\n  EOL,\n  arch,\n  constants,\n  cpus,\n  endianness,\n  freemem,\n  homedir,\n  hostname,\n  loadavg,\n  networkInterfaces,\n  platform,\n  release,\n  tmpdir,\n  totalmem,\n  type,\n  uptime,\n  userInfo,\n} = os","import { homedir } from 'os'\n\nconst extractPathRegex = /\\s+at.*(?:\\(|\\s)(.*)\\)?/\nconst pathRegex = /^(?:(?:(?:node|(?:internal\\/[\\w/]*|.*node_modules\\/(?:IGNORED_MODULES)\\/.*)?\\w+)\\.js:\\d+:\\d+)|native)/\n\nconst homeDir = homedir()\n\n/**\n * Remove internal Node.JS lines from the error stack traces.\n * @param {string} stack The error stack to update.\n * @param {!_cleanStack.Config} [options] Options for the program.\n * @param {boolean} [options.pretty=false] Replace the absolute path to the home directory with the `~`. Default `false`.\n * @param {!Array<string>} [options.ignoredModules=\"\uff3b'pirates'\uff3d\"] Which modules to ignore in the path. Default `\uff3b'pirates'\uff3d`.\n */\nconst cleanStack = (stack, options) => {\n  const {\n    pretty = false, ignoredModules = ['pirates'],\n  } = options || {}\n  const j = ignoredModules.join('|')\n  const re = new RegExp(pathRegex.source.replace('IGNORED_MODULES', j))\n\n  return stack.replace(/\\\\/g, '/')\n    .split('\\n')\n    .filter(x => {\n      const pathMatches = x.match(extractPathRegex)\n      if (pathMatches === null || !pathMatches[1]) {\n        return true\n      }\n\n      const match = pathMatches[1]\n\n      // Electron\n      if (match.includes('.app/Contents/Resources/electron.asar') ||\n        match.includes('.app/Contents/Resources/default_app.asar')) {\n        return false\n      }\n\n      return !re.test(match)\n    })\n    .filter(x => x.trim())\n    .map(x => {\n      if (pretty) {\n        return x.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')))\n      }\n\n      return x\n    })\n    .join('\\n')\n}\n\nexport default cleanStack\n\n/* documentary types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_cleanStack.Config} Config Options for the program.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _cleanStack.Config Options for the program.\n * @prop {boolean} [pretty=false] Replace the absolute path to the home directory with the `~`. Default `false`.\n * @prop {!Array<string>} [ignoredModules=\"\uff3b'pirates'\uff3d\"] Which modules to ignore in the path. Default `\uff3b'pirates'\uff3d`.\n */\n","import extractTags from 'rexml'\nimport Type from './Type'\nimport Method from './Method'\nimport Import from './Import'\nimport read from '@wrote/read'\nimport Arg, { extractArgs } from './Arg'\nimport Property from './Property'\n\n/**\n * When Documentary compiles types with `-n` (root namespace) flag,\n * the namespace needs to be cleared.\n * @param {string} namespace\n * @param {!_typal.Type} type\n */\nconst removeNamespace = (namespace, type) => {\n  const s = new RegExp(`([!?])?${namespace}\\\\.`, 'g')\n  type.properties.forEach((p) => {\n    p.clearNamespace(namespace, s)\n  })\n  type.clearNamespace(namespace)\n}\n\n/**\n * @param {Type} type\n * @param {string} [rootNamespace]\n */\nconst addConstructorProperty = (type, rootNamespace) => {\n  if (!type.args || !type.args.length) return\n  const args = type.args.map(({ fullType }) => fullType).join(', ')\n  const t = `function(${args}): ${type.fullName}`\n  const prop = new Property(type.args)\n  prop.isConstructor = true\n  prop.fromXML('Constructor method.', { 'type': t, 'name': 'constructor' })\n  prop.clearNamespace(rootNamespace)\n  type.properties.unshift(prop)\n}\n\n/**\n * Parse the types.xml file.\n * @param {string} xml The content of the `xml` file.\n * @param {string} [rootNamespace] Namespace to ignore in types and properties.\n */\nconst parseFile = (xml, rootNamespace) => {\n  const root = extractTags('types', xml)\n  if (!root.length)\n    throw new Error('XML file should contain root types element.')\n\n  const [{ content: Root, props: {\n    'namespace': ns1,\n    'ns': namespace = ns1,\n  } }] = root\n\n  const ns = rootNamespace == namespace ? undefined : namespace\n\n  const extracted = extractTags([\n    'type', 'interface', 'constructor', 'method', 'import',\n  ], Root)\n\n  /** @type {!Array<!_typal.Import>} */\n  const imports = []\n\n  const types = /** @type {!Array<!_typal.Type>} */ (extracted.reduce((acc, { content, props, tag }) => {\n    const { 'alias': alias, 'aliases': aliases, ...restProps } = props\n    const als = alias ? [alias] : (aliases ? aliases.split(/, */) : [])\n\n    switch (tag) {\n    case 'type': {\n      const type = new Type()\n      type.fromXML(content, props, ns, rootNamespace)\n      acc.push(type)\n\n      als.forEach((name) => {\n        const type2 = new Type()\n        type2.fromXML(content, { ...restProps, name }, ns, rootNamespace)\n        acc.push(type2)\n      })\n      break\n    }\n    case 'interface': {\n      const t = parseTypes(content, props, ns, rootNamespace)\n      t.forEach(tt => {\n        addConstructorProperty(tt, rootNamespace)\n        tt.isInterface = true\n      })\n      acc.push(...t)\n      break\n    }\n    case 'constructor': {\n      const t = parseTypes(content, props, ns, rootNamespace)\n      t.forEach(tt => {\n        addConstructorProperty(tt, rootNamespace)\n        tt.isConstructor = true\n      })\n      acc.push(...t)\n      break\n    }\n    case 'method': {\n      const t = parseTypes(content, props, ns, rootNamespace, true)\n      acc.push(...t)\n      break\n    }\n    /**\n     * Imports parsed into types.\n     */\n    case 'import': {\n      const im = new Import()\n      im.fromXML(content, props, props['ns'] || props['from'], rootNamespace)\n      imports.push(im)\n\n      break\n    }\n    }\n    return acc\n  }, []))\n\n  if (rootNamespace) types.forEach(t => removeNamespace(\n    /** @type {string} */ (rootNamespace), t\n  ))\n\n  return { namespace, types, imports }\n}\n\n/**\n * This should be applicable only to <interface> / <constructor> / <method>\n * @param {string} content\n * @param {Object} props\n * @param {string} [ns]\n * @param {string} [rootNamespace]\n * @param {boolean} [isMethod]\n */\nconst parseType = (content, props, ns, rootNamespace, isMethod = false) => {\n  const type = isMethod ? new Method() : new Type()\n  const i = content.search(/<(prop|function|fn|static) /)\n  let prebody = '', body = content\n  if (i != 1) {\n    prebody = content.slice(0, i)\n    body = content.slice(i)\n  }\n  const { argsArgs, newContent } = extractArgs(prebody, rootNamespace)\n\n  /** Specify args in props... disable ATM */\n  // let { 'args': args = '', ...rest } = props\n  // if (!args && argsArgs.length) {\n  //   args = argsArgs.map(({ type: at, optional }) => {\n  //     if (optional !== null) return `${at}=`\n  //     return at\n  //   }).join(',')\n  // }\n  // const assignment = `function(${args})`\n\n  type.fromXML(isMethod ? newContent : body, props, ns, rootNamespace)\n  type.setAssignment(argsArgs)\n\n  return type\n}\n\n/** @type {function(new: Property)} */\nconst a = function () {}\n\n/**\n * This is applicable to @interfaces/constructors/methods which\n * will be written with `= function () {}` in externs.\n * @param {string} content\n * @param {!Object} props\n * @param {string} [ns]\n * @param {string} [rootNamespace]\n * @param {boolean} [isMethod]\n */\nconst parseTypes = (content, props, ns, rootNamespace, isMethod = false) => {\n  const acc = []\n  const { 'alias': alias, 'aliases': aliases, ...restProps } = props\n  const type = parseType(content, props, ns, rootNamespace, isMethod)\n  acc.push(type)\n\n  const als = alias ? [alias] : (aliases ? aliases.split(/, */) : [])\n\n  als.forEach((name) => {\n    const type2 = parseType(content, { ...restProps, name }, ns, rootNamespace, isMethod)\n    type2.description = `${type2.description}${type2.description ? ' ' : ''}Alias of \\`${restProps.name}\\`.`\n    acc.push(type2)\n  })\n\n  return acc\n}\n\nexport default parseFile\n\n/**\n * @param {string} path\n */\nexport const readTypesFile = async (path, ignore = []) => {\n  const xml = await read(path)\n  let namespace, types, imports\n  try {\n    ({ namespace = null, types, imports } = parseFile(xml))\n  } catch (err) {\n    err.message = `Error while reading ${path}\\n${err.message}`\n    throw err\n  }\n  types = types.filter(({ fullName }) => {\n    if (ignore.includes(fullName)) return false\n    return true\n  })\n  imports = imports.filter(({ fullName }) => {\n    if (ignore.includes(fullName)) return false\n    return true\n  })\n  return { types, imports, namespace }\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../types').Type} _typal.Type\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../../types').Import} _typal.Import\n */","import '../types/externs'\nimport { Type, Property, Method, getNameWithDefault, parseFile, getLinks } from './'\n\nmodule.exports = {\n  '_Type': Type,\n  '_Property': Property,\n  '_Method': Method,\n  '_parseFile': parseFile,\n  '_getLinks': getLinks,\n}"],
"names":["$jscomp.defineProperty","$jscomp.global","$jscomp.polyfill","mismatch","re","string","keys","m","replace","match","args","o","slice","p","length","reduce","acc","capturedGroup","i","key","undefined","start","push","attributeRe","RegExp","nameRe","source","valRe","attributesRe","extractTags","tag","matches","join","Array","isArray","tags","t","simple","end1","end2","map","res","tagName","attributes","content","attrs","trim","props","extractProps","simpleAttribute","val","test","parseInt","lex","s","split","filter","a","fn","Fn","nonNullable","nullable","optional","any","parser","tokens","c","peekNext","n","parseType","specialAllowed","union","type","token","includes","Error","propName","err","message","record","name","meta","return","foundArgs","this","new","variableArgs","arg","ret","function","applicationWithDot","apps","application","nextType","unionType","parse","getPropType","number","boolean","trimD","d","trimRight","exec","index","substr","lastIndexOf","ws","w","repeat","dd","b","find","notWithSpace","startsWith","fromXML","opt","rootNamespace","description","endsWith","Arg","extractArgs","ai","newContent","argsArgs","pre","ac","ap","ar","clearNamespace","namespace","def","closure","noParams","Static","initial","_closure","default","_static","Property","_type","closureType","parsed","isConstructor","serialiseType","j","argOptional","r","typeName","value","isParsedFunction","getLinks","allTypes","opts","console","log","error","parsedToString","escapePipe","forEach","argsJoined","rs","Object","v","getTypeWithLink","u","flatten","nameProcess","linkFn","l","getLinkToType","link","found","fullName","nn","linkedTypes","importType","linkedType","actualType","prefix","toLowerCase","makePropsTable","narrow","preprocessDesc","constr","isInterface","anyHaveDefault","some","hasDefault","linkOptions","links","ps","prop","toTypeScriptFunction","de","esc","h","JSON","stringify","Type","noExpand","spread","noToc","properties","isRecord","extends","desc","ext","pr","fnProps","functions","isStatic","async","Void","rest","fullType","fnType","all","static","ns","details","displayInDetails","typeWithLink","useCode","import","wrapCode","codedName","LINE","twl","useTag","e","foundExt","le","td","extendS","table","Method","_methodReturn","methodReturn","Import","from","homedir","os","removeNamespace","addConstructorProperty","unshift","isMethod","search","prebody","body","parseTypes","alias","aliases","restProps","als","type2","module","exports","xml","parseFile","root","Root","ns1","imports","types","extracted","tt","im"]
}
